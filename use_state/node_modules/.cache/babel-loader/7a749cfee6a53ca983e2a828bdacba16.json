{"ast":null,"code":"var _jsxFileName = \"/home/lyle/Course_Work/hooks-work/use_state/src/App.js\",\n    _s = $RefreshSig$();\n\n//import the hook you want to use\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  //ALWAYS returns an array with 2 values. CurrentState and function. Pass useState() what you want the initial state to be\n  const [count, setCount] = useState(1);\n\n  function decrement() {\n    //INCORRECT way to update a value\n    // setCount(count-1)\n    //always use the \"function version\"\n    setCount(previousCount => previousCount - 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: decrement,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n} //can only use hooks inside of function components - NOT classes\n//hooks must always execute in the same order (CANNOT put them in 'if' statements)\n\n_s(App, \"2zt0xIm16ZAkTfzs1tD1YE/ZHbE=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/lyle/Course_Work/hooks-work/use_state/src/App.js"],"names":["React","useState","App","count","setCount","decrement","previousCount"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,CAAD,CAAlC;;AAEA,WAASI,SAAT,GAAoB;AAClB;AACA;AAEA;AACAD,IAAAA,QAAQ,CAACE,aAAa,IAAIA,aAAa,GAAE,CAAjC,CAAR;AACD;;AAED,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAED,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAOF;AAAP;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,C,CAED;AACA;;GAtBwBD,G;;KAAAA,G","sourcesContent":["//import the hook you want to use\nimport React, {useState} from 'react'\n\n\nexport default function App() {\n  //ALWAYS returns an array with 2 values. CurrentState and function. Pass useState() what you want the initial state to be\n  const [count, setCount] = useState(1)\n\n  function decrement(){\n    //INCORRECT way to update a value\n    // setCount(count-1)\n\n    //always use the \"function version\"\n    setCount(previousCount => previousCount -1)\n  }\n\n  return (\n    <div>\n      <button onClick={decrement}>-</button>\n      <span>{count}</span>\n      <button>+</button>\n    </div>\n  )\n}\n\n//can only use hooks inside of function components - NOT classes\n//hooks must always execute in the same order (CANNOT put them in 'if' statements)\n"]},"metadata":{},"sourceType":"module"}