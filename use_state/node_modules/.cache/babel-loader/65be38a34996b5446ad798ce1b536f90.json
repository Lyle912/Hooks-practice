{"ast":null,"code":"var _jsxFileName = \"/home/lyle/Course_Work/hooks-work/use_state/src/App.js\",\n    _s = $RefreshSig$();\n\n//import the hook you want to use\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  //ALWAYS returns an array with 2 values. CurrentState and function. Pass useState() what you want the initial state to be.\n  const [count, setCount] = useState(1); //If you have multiple things in your state, use multiple useState()s\n\n  const [color, setColor] = useState('blue'); //Can also pass useState a function as an inital value. Used for 'complex' inital values. Only gets run the first time you render\n  // const [count, setCount] = useState(() => {\n  //   console.log(\"this will only show up once\")\n  //   return 1\n  // })\n\n  function decrementCount() {\n    //INCORRECT way to update a value\n    // setCount(count-1)\n    //always use the \"function version\"\n    setCount(previousCount => previousCount - 1);\n    setColor('red');\n  }\n\n  function incrementCount() {\n    setCount(previousCount => previousCount + 1);\n    setColor('blue');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: decrementCount,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementCount,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n} //can only use hooks inside of function components - NOT classes\n//hooks must always execute in the same order (CANNOT put them in 'if' statements)\n//if you use an object inside of your state - useState({count: 4, color: blue}) - you must you the spread operator when updating your state - ...\n\n_s(App, \"09Vkn2Ca4eOPmkm8olqj3i5BANg=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/lyle/Course_Work/hooks-work/use_state/src/App.js"],"names":["React","useState","App","count","setCount","color","setColor","decrementCount","previousCount","incrementCount"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,CAAD,CAAlC,CAF4B,CAG5B;;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,MAAD,CAAlC,CAJ4B,CAM5B;AACA;AACA;AACA;AACA;;AAEA,WAASM,cAAT,GAAyB;AACvB;AACA;AAEA;AACAH,IAAAA,QAAQ,CAACI,aAAa,IAAIA,aAAa,GAAE,CAAjC,CAAR;AACAF,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACD;;AAED,WAASG,cAAT,GAAyB;AACvBL,IAAAA,QAAQ,CAACI,aAAa,IAAIA,aAAa,GAAE,CAAjC,CAAR;AACAF,IAAAA,QAAQ,CAAC,MAAD,CAAR;AACD;;AAED,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAOJ;AAAP;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,gBAAOE;AAAP;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,OAAO,EAAEI,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,C,CAED;AACA;AACA;;GAtCwBP,G;;KAAAA,G","sourcesContent":["//import the hook you want to use\nimport React, {useState} from 'react'\n\n\nexport default function App() {\n  //ALWAYS returns an array with 2 values. CurrentState and function. Pass useState() what you want the initial state to be.\n  const [count, setCount] = useState(1)\n  //If you have multiple things in your state, use multiple useState()s\n  const [color, setColor] = useState('blue')\n\n  //Can also pass useState a function as an inital value. Used for 'complex' inital values. Only gets run the first time you render\n  // const [count, setCount] = useState(() => {\n  //   console.log(\"this will only show up once\")\n  //   return 1\n  // })\n\n  function decrementCount(){\n    //INCORRECT way to update a value\n    // setCount(count-1)\n\n    //always use the \"function version\"\n    setCount(previousCount => previousCount -1)\n    setColor('red')\n  }\n\n  function incrementCount(){\n    setCount(previousCount => previousCount +1)\n    setColor('blue')\n  }\n\n  return (\n    <div>\n      <button onClick={decrementCount}>-</button>\n      <span>{count}</span>\n      <span>{color}</span>\n      <button onClick={incrementCount}>+</button>\n    </div>\n  )\n}\n\n//can only use hooks inside of function components - NOT classes\n//hooks must always execute in the same order (CANNOT put them in 'if' statements)\n//if you use an object inside of your state - useState({count: 4, color: blue}) - you must you the spread operator when updating your state - ...\n"]},"metadata":{},"sourceType":"module"}